height == "5’5’’ (165cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’5’’ (165cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’8’’ (173cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’8’’ (173cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’8’’ (173cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’8’’ (173cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "6’4’’ (193cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "6’4’’ (193cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "6’4’’ (193cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "6’4’’ (193cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
# Add similar conditions for all heights
TRUE ~ NA_real_
)
}
# Apply the function to the dataset
clean_data <- clean_data |>
mutate(
Weight_Points = assign_weight_points(Height, Weight_Status)
)
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
# Define the function to assign weight points based on Weight_Status and Height
assign_weight_points <- function(height, weight_status) {
case_when(
height == "4’10’’ (147cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "4’10’’ (147cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "4’10’’ (147cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "4’10’’ (147cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "4’11’’ (150cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "4’11’’ (150cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "4’11’’ (150cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "4’11’’ (150cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’0’’ (152cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’0’’ (152cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’0’’ (152cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’0’’ (152cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’5’’ (165cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’5’’ (165cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’5’’ (165cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’5’’ (165cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’8’’ (173cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’8’’ (173cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’8’’ (173cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’8’’ (173cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "6’4’’ (193cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "6’4’’ (193cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "6’4’’ (193cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "6’4’’ (193cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
# Add similar conditions for all heights
TRUE ~ NA_real_
)
}
# Apply the function to the dataset
clean_data <- clean_data |>
mutate(
Weight_Points = assign_weight_points(Height, Weight_Status)
)
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
# Check missing values
sum(is.na(data |> select(-Gestational_Diabetes)))
miss_var_which(data)
gg_miss_var(data)
# impute with the mode
mode(data$Gender)
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
clean_data <- data |>
mutate(Age = ifelse(is.na(Age), mode(Age), Age)) |>
mutate(Gender = ifelse(is.na(Gender), mode(Gender), Gender)) |>
mutate(Marital_Status = ifelse(is.na(Marital_Status), mode(Marital_Status), Marital_Status)) |>
mutate(Occupation = ifelse(is.na(Occupation), mode(Occupation), Occupation)) |>
mutate(Family_Income = ifelse(is.na(Family_Income), mode(Family_Income), Family_Income)) |>
mutate(Education = ifelse(is.na(Education), mode(Education), Education)) |>
mutate(Residence = ifelse(is.na(Residence), mode(Residence), Residence)) |>
mutate(Family_History = ifelse(is.na(Family_History), mode(Family_History), Family_History)) |>
mutate(High_Blood_Pressure = ifelse(is.na(High_Blood_Pressure), mode(High_Blood_Pressure), High_Blood_Pressure)) |>
mutate(Physically_Active = ifelse(is.na(Physically_Active), mode(Physically_Active), Physically_Active)) |>
mutate(Height = ifelse(is.na(Height), mode(Height), Height)) |>
mutate(Weight_Status = ifelse(is.na(Weight_Status), mode(Weight_Status), Weight_Status)) |>
mutate(District = ifelse(is.na(District), mode(District), District))
gg_miss_var(clean_data)
miss_var_summary(clean_data)
sum(is.na(clean_data))
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
# Define the function to assign weight points based on Weight_Status and Height
assign_weight_points <- function(height, weight_status) {
case_when(
height == "4’10’’ (147cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "4’10’’ (147cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "4’10’’ (147cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "4’10’’ (147cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "4’11’’ (150cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "4’11’’ (150cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "4’11’’ (150cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "4’11’’ (150cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’0’’ (152cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’0’’ (152cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’0’’ (152cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’0’’ (152cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’5’’ (165cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’5’’ (165cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’5’’ (165cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’5’’ (165cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5’8’’ (173cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5’8’’ (173cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5’8’’ (173cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5’8’’ (173cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "6’4’’ (193cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "6’4’’ (193cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "6’4’’ (193cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "6’4’’ (193cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
# Add similar conditions for all heights
TRUE ~ NA_real_
)
}
# Apply the function to the dataset
clean_data <- clean_data |>
mutate(
Weight_Points = assign_weight_points(Height, Weight_Status)
)
# Define the function to assign weight points based on Weight_Status and Height
assign_weight_points <- function(height, weight_status) {
case_when(
height == "5'5\" (165cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5'5\" (165cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5'5\" (165cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5'5\" (165cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5'10\" (178cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5'10\" (178cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5'10\" (178cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5'10\" (178cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "4'11\" (150cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "4'11\" (150cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "4'11\" (150cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "4'11\" (150cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5'0\" (152cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5'0\" (152cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5'0\" (152cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5'0\" (152cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
height == "5'8\" (173cm)" & weight_status == "<189 lbs. (86kg)" ~ 0,
height == "5'8\" (173cm)" & weight_status == "189-226 lbs. (86-102kg)" ~ 1,
height == "5'8\" (173cm)" & weight_status == "227-310 lbs. (103-136kg)" ~ 2,
height == "5'8\" (173cm)" & weight_status == "302+ lbs. (137kg)" ~ 3,
TRUE ~ NA_real_  # Assign NA if no match is found
)
}
# Apply the function to the dataset
clean_data <- clean_data |>
mutate(
Weight_Points = assign_weight_points(Height, Weight_Status)
)
View(clean_data)
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
head(data)
View(data)
# Check missing values
sum(is.na(data |> select(-Gestational_Diabetes)))
miss_var_which(data)
gg_miss_var(data)
# impute with the mode
mode(data$Gender)
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
clean_data <- data |>
mutate(Age = ifelse(is.na(Age), mode(Age), Age)) |>
mutate(Gender = ifelse(is.na(Gender), mode(Gender), Gender)) |>
mutate(Marital_Status = ifelse(is.na(Marital_Status), mode(Marital_Status), Marital_Status)) |>
mutate(Occupation = ifelse(is.na(Occupation), mode(Occupation), Occupation)) |>
mutate(Family_Income = ifelse(is.na(Family_Income), mode(Family_Income), Family_Income)) |>
mutate(Education = ifelse(is.na(Education), mode(Education), Education)) |>
mutate(Residence = ifelse(is.na(Residence), mode(Residence), Residence)) |>
mutate(Family_History = ifelse(is.na(Family_History), mode(Family_History), Family_History)) |>
mutate(High_Blood_Pressure = ifelse(is.na(High_Blood_Pressure), mode(High_Blood_Pressure), High_Blood_Pressure)) |>
mutate(Physically_Active = ifelse(is.na(Physically_Active), mode(Physically_Active), Physically_Active)) |>
mutate(Height = ifelse(is.na(Height), mode(Height), Height)) |>
mutate(Weight_Status = ifelse(is.na(Weight_Status), mode(Weight_Status), Weight_Status)) |>
mutate(District = ifelse(is.na(District), mode(District), District))
View(clean_data)
gg_miss_var(clean_data)
miss_var_summary(clean_data)
sum(is.na(clean_data))
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
# data
df <- read_excel("data/Diabetes_ALL.xlsx")
head(df)
# --- Preprocessing and Scoring using tidyverse ---
df_scored <- df %>%
mutate(
# 1. Age Score
Age_Score = case_when(
Age == "Less than 40 Years" ~ 0,
Age == "40-49 years" ~ 1, # Included based on PDF, though not in sample data
Age == "50-59 Years" ~ 2,
Age == "60 years or older" ~ 3, # Included based on PDF
TRUE ~ NA_integer_ # Default case if none match
),
# 2. Gender Score
Gender_Score = case_when(
Gender == "Male" ~ 1,
Gender == "Female" ~ 0,
TRUE ~ NA_integer_
),
# 3. Gestational Diabetes Score
# Use backticks ` ` because the column name has a trailing space
Gestational_Diabetes_Score = case_when(
# Score is 1 only if Female AND Yes. Otherwise 0 (including Male or NA).
Gender == "Female" & `Gestational_Diabetes ` == "Yes" ~ 1,
TRUE ~ 0 # Covers Male, Female/No, Female/NA
),
# 4. Family History Score
Family_History_Score = case_when(
Family_History == "Yes" ~ 1,
Family_History == "No" ~ 0,
TRUE ~ NA_integer_
),
# 5. High Blood Pressure Score
High_Blood_Pressure_Score = case_when(
High_Blood_Pressure == "Yes" ~ 1,
High_Blood_Pressure == "No" ~ 0,
TRUE ~ NA_integer_
),
# 6. Physically Active Score
Physically_Active_Score = case_when(
Physically_Active == "No" ~ 1, # Note: 'No' gets 1 point
Physically_Active == "Yes" ~ 0,
TRUE ~ NA_integer_
),
# 7. Weight Score (Based on interpretation)
# Clean the string slightly just in case (remove potential extra spaces)
Weight_Status_Clean = str_squish(str_replace_all(Weight_Status, fixed("."), "")), # Remove dots, squish spaces
Weight_Score = case_when(
str_detect(Weight_Status_Clean, "<189 lbs") ~ 0,
str_detect(Weight_Status_Clean, "189-226 lbs") ~ 1,
str_detect(Weight_Status_Clean, ">226 lbs") ~ 2,
TRUE ~ NA_integer_ # Default case if none match
)
) %>%
# --- Calculate Total Score ---
# Select score columns and sum row-wise
# Replace NA scores with 0 before summing, assuming NA means 0 points for that category
mutate(across(ends_with("_Score"), ~replace_na(.x, 0))) %>%
rowwise() %>%
mutate(Total_Score = sum(c_across(ends_with("_Score")))) %>%
ungroup() # Important to ungroup after rowwise operation
View(df)
names(df)
# --- Preprocessing and Scoring using tidyverse ---
df_scored <- df %>%
mutate(
# 1. Age Score
Age_Score = case_when(
Age == "Less than 40 Years" ~ 0,
Age == "40-49 years" ~ 1, # Included based on PDF, though not in sample data
Age == "50-59 Years" ~ 2,
Age == "60 years or older" ~ 3, # Included based on PDF
TRUE ~ NA_integer_ # Default case if none match
),
# 2. Gender Score
Gender_Score = case_when(
Gender == "Male" ~ 1,
Gender == "Female" ~ 0,
TRUE ~ NA_integer_
),
# 3. Gestational Diabetes Score
# Use backticks ` ` because the column name has a trailing space
Gestational_Diabetes_Score = case_when(
# Score is 1 only if Female AND Yes. Otherwise 0 (including Male or NA).
Gender == "Female" & Gestational_Diabetes == "Yes" ~ 1,
TRUE ~ 0 # Covers Male, Female/No, Female/NA
),
# 4. Family History Score
Family_History_Score = case_when(
Family_History == "Yes" ~ 1,
Family_History == "No" ~ 0,
TRUE ~ NA_integer_
),
# 5. High Blood Pressure Score
High_Blood_Pressure_Score = case_when(
High_Blood_Pressure == "Yes" ~ 1,
High_Blood_Pressure == "No" ~ 0,
TRUE ~ NA_integer_
),
# 6. Physically Active Score
Physically_Active_Score = case_when(
Physically_Active == "No" ~ 1, # Note: 'No' gets 1 point
Physically_Active == "Yes" ~ 0,
TRUE ~ NA_integer_
),
# 7. Weight Score (Based on interpretation)
# Clean the string slightly just in case (remove potential extra spaces)
Weight_Status_Clean = str_squish(str_replace_all(Weight_Status, fixed("."), "")), # Remove dots, squish spaces
Weight_Score = case_when(
str_detect(Weight_Status_Clean, "<189 lbs") ~ 0,
str_detect(Weight_Status_Clean, "189-226 lbs") ~ 1,
str_detect(Weight_Status_Clean, ">226 lbs") ~ 2,
TRUE ~ NA_integer_ # Default case if none match
)
) %>%
# --- Calculate Total Score ---
# Select score columns and sum row-wise
# Replace NA scores with 0 before summing, assuming NA means 0 points for that category
mutate(across(ends_with("_Score"), ~replace_na(.x, 0))) %>%
rowwise() %>%
mutate(Total_Score = sum(c_across(ends_with("_Score")))) %>%
ungroup() # Important to ungroup after rowwise operation
View(df_scored)
# --- Final Output ---
# Select original columns plus the score columns and total score
# Using select() helper functions for conciseness
df_final <- df_scored %>%
select(
everything(), # Keep all original columns
-Weight_Status_Clean, # Remove the intermediate cleaning column
Age_Score,
Gender_Score,
Gestational_Diabetes_Score,
Family_History_Score,
High_Blood_Pressure_Score,
Physically_Active_Score,
Weight_Score,
Total_Score
)
View(df_final)
sum(is.na(df))
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
head(data)
# Check missing values
sum(is.na(data |> select(-Gestational_Diabetes)))
miss_var_which(data)
gg_miss_var(data)
# impute with the mode
mode(data$Gender)
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
clean_data <- data |>
mutate(Age = ifelse(is.na(Age), mode(Age), Age)) |>
mutate(Gender = ifelse(is.na(Gender), mode(Gender), Gender)) |>
mutate(Marital_Status = ifelse(is.na(Marital_Status), mode(Marital_Status), Marital_Status)) |>
mutate(Occupation = ifelse(is.na(Occupation), mode(Occupation), Occupation)) |>
mutate(Family_Income = ifelse(is.na(Family_Income), mode(Family_Income), Family_Income)) |>
mutate(Education = ifelse(is.na(Education), mode(Education), Education)) |>
mutate(Residence = ifelse(is.na(Residence), mode(Residence), Residence)) |>
mutate(Family_History = ifelse(is.na(Family_History), mode(Family_History), Family_History)) |>
mutate(High_Blood_Pressure = ifelse(is.na(High_Blood_Pressure), mode(High_Blood_Pressure), High_Blood_Pressure)) |>
mutate(Physically_Active = ifelse(is.na(Physically_Active), mode(Physically_Active), Physically_Active)) |>
mutate(Height = ifelse(is.na(Height), mode(Height), Height)) |>
mutate(Weight_Status = ifelse(is.na(Weight_Status), mode(Weight_Status), Weight_Status)) |>
mutate(District = ifelse(is.na(District), mode(District), District))
gg_miss_var(clean_data)
miss_var_summary(clean_data)
sum(is.na(clean_data))
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
head(data)
# Check missing values
sum(is.na(data |> select(-Gestational_Diabetes)))
miss_var_which(data)
gg_miss_var(data)
# impute with the mode
mode(data$Gender)
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
clean_data <- data |>
mutate(Age = ifelse(is.na(Age), mode(Age), Age)) |>
mutate(Gender = ifelse(is.na(Gender), mode(Gender), Gender)) |>
mutate(Marital_Status = ifelse(is.na(Marital_Status), mode(Marital_Status), Marital_Status)) |>
mutate(Occupation = ifelse(is.na(Occupation), mode(Occupation), Occupation)) |>
mutate(Family_Income = ifelse(is.na(Family_Income), mode(Family_Income), Family_Income)) |>
mutate(Education = ifelse(is.na(Education), mode(Education), Education)) |>
mutate(Residence = ifelse(is.na(Residence), mode(Residence), Residence)) |>
mutate(Family_History = ifelse(is.na(Family_History), mode(Family_History), Family_History)) |>
mutate(High_Blood_Pressure = ifelse(is.na(High_Blood_Pressure), mode(High_Blood_Pressure), High_Blood_Pressure)) |>
mutate(Physically_Active = ifelse(is.na(Physically_Active), mode(Physically_Active), Physically_Active)) |>
mutate(Height = ifelse(is.na(Height), mode(Height), Height)) |>
mutate(Weight_Status = ifelse(is.na(Weight_Status), mode(Weight_Status), Weight_Status)) |>
mutate(District = ifelse(is.na(District), mode(District), District))
gg_miss_var(clean_data)
miss_var_summary(clean_data)
sum(is.na(clean_data))
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
head(data)
# Check missing values
sum(is.na(data |> select(-Gestational_Diabetes)))
miss_var_which(data)
gg_miss_var(data)
# impute with the mode
mode(data$Gender)
mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
clean_data <- data |>
mutate(Age = ifelse(is.na(Age), mode(Age), Age)) |>
mutate(Gender = ifelse(is.na(Gender), mode(Gender), Gender)) |>
mutate(Marital_Status = ifelse(is.na(Marital_Status), mode(Marital_Status), Marital_Status)) |>
mutate(Occupation = ifelse(is.na(Occupation), mode(Occupation), Occupation)) |>
mutate(Family_Income = ifelse(is.na(Family_Income), mode(Family_Income), Family_Income)) |>
mutate(Education = ifelse(is.na(Education), mode(Education), Education)) |>
mutate(Residence = ifelse(is.na(Residence), mode(Residence), Residence)) |>
mutate(Family_History = ifelse(is.na(Family_History), mode(Family_History), Family_History)) |>
mutate(High_Blood_Pressure = ifelse(is.na(High_Blood_Pressure), mode(High_Blood_Pressure), High_Blood_Pressure)) |>
mutate(Physically_Active = ifelse(is.na(Physically_Active), mode(Physically_Active), Physically_Active)) |>
mutate(Height = ifelse(is.na(Height), mode(Height), Height)) |>
mutate(Weight_Status = ifelse(is.na(Weight_Status), mode(Weight_Status), Weight_Status)) |>
mutate(District = ifelse(is.na(District), mode(District), District))
gg_miss_var(clean_data)
miss_var_summary(clean_data)
sum(is.na(clean_data))
# Standardize Height and Weight_Status columns
clean_data <- clean_data  |>
mutate(
Height = str_replace_all(Height, "’", "'")  |>   # Replace curly quotes with straight quotes
str_replace_all("’’", "\""),          # Replace double curly quotes with straight double quotes
Weight_Status = str_trim(Weight_Status)        # Remove extra spaces
)
View(data)
Weight_Status_Clean = str_squish(str_replace_all(Weight_Status, fixed("."), ""))
clean_data |> Weight_Status_Clean = str_squish(str_replace_all(Weight_Status, fixed("."), ""))
clean_data |>
tr_squish(str_replace_all(Weight_Status, fixed("."), ""))
# Load the tidyverse library
library(tidyverse)
library(readxl)
library(naniar)
# data
data <- read_excel("data/Diabetes_ALL.xlsx")
head(data)
# --- Helper function to calculate the mode ---
calculate_mode <- function(x, na.rm = TRUE) {
if(na.rm){
x <- x[!is.na(x)] # Remove NA values
}
if(length(x) == 0) {
return(NA) # Return NA if vector is empty or all NAs
}
# Calculate frequency of each unique value
ux <- unique(x)
freq <- tabulate(match(x, ux))
# Return the value with the maximum frequency (first one in case of tie)
mode_value <- ux[which.max(freq)]
return(mode_value)
}
# --- Read the data ---
df <- read_excel("data/Diabetes_ALL.xlsx")
head(df)
# --- Impute Missing Values (Mode for Categorical) ---
# Identify categorical columns used for scoring (use backticks for names with spaces)
cols_to_impute <- c("Age", "Gender", "Gestational_Diabetes ", "Family_History",
"High_Blood_Pressure", "Physically_Active", "Weight_Status")
# Apply mode imputation
df_imputed <- df %>%
mutate(across(all_of(cols_to_impute),
~ replace_na(.x, calculate_mode(.x))
))
